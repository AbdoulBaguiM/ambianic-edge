version: '0.0.1'

sources:
  cameras:
    front_door:
      video_stream: uri
      still_image: uri

# Define inference pipelines that apply AI models to input data.
# Pipelines are structured as directed acyclic graphs (DAG)
pipelines:
  daytime_front_door_watch:
    - source: @front_door
      -  mask: svg
         - uri: ...
    - inference: @find_person_or_vehicle
    - fork:
        - label_selector: [person]
            - inference: @detect_face
            - inference: @recognize_face
        - label_selector: [vehicle]
            - inference: @detect_license_plate

#  nighttime_front_door_watch:
#    source: @front_door
#    -
#      mask: svg
#        - uri: ...
#      inference: @find_person_or_vehicle
#    -
#      mask:
#
#  vacation_front_door_watch:

# Policies group pipelines and are mutually exclusive.
#  Only one policy is active at a time.
#  When a specific policy is activated, all other policies are idle
# policies:
#   daytime:
#     - daytime_front_door_watch
#     - daytime_backyard_door_watch
#   nighttime:
#   vacation:

inferences:
  find_person_or_vehicle:
    ai_model: image_detection
    frequency: 2 # in seconds
    filter:
      labels: person
    confidence_threshold: 0.6
    save_samples:
      location: @data
      detections_interval: 2 # how often (in seconds) to save samples with positive label detections
      background_interval: 60*30 #  how often (in seconds) to save samples without any detections
    next_inference:
      on_labels: person, vehicle
      model: front_door_faces

  find_faces:
    ai_model: face_detection
    mask: svg uri
    frequency: 2 # in seconds
    filter:
      labels: person
    confidence_threshold: 0.6
    save_samples:
      location: @data
      detections_interval: 2 # how often (in seconds) to save samples with positive label detections
      background_interval: 60*30 #  how often (in seconds) to save samples without any detections
    next_inference:
      on_labels: person, vehicle
      model: front_door_faces


  # front_door_listen:
  #   source: front_door
  #   ai_model: voice_detection
  #   mask: audio_hz_trim

ai_models:
  image_classification:
    tf_graph:
    labels:
  image_detection:
    tf_graph:
    labels:

# Masks allow filtering out input signal before an AI model sees it
masks:
  # svg mask applies an SVG graphics onto an input image
  svg: ambianic.masks.SvgMask
    arguments:
      - uri # of the svg file
      # scale_to_fit indicates whether to scale the mask to fit the stream source shape
      # default True
      - scale_to_fit
  # audio_hz_trim is a simple mask that cuts out frequency ranges from an input audio stream
  # audio_hz_trim: ambian.masks.AudioHzTrim
  #  arguments:
  #    - hz_band # lower and upper frequency range to cut out
